// Code generated by MockGen. DO NOT EDIT.
// Source: eventsproxy/internal/service (interfaces: ProxyService)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mocks.go -package=mock_service eventsproxy/internal/service ProxyService
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProxyService is a mock of ProxyService interface.
type MockProxyService struct {
	ctrl     *gomock.Controller
	recorder *MockProxyServiceMockRecorder
}

// MockProxyServiceMockRecorder is the mock recorder for MockProxyService.
type MockProxyServiceMockRecorder struct {
	mock *MockProxyService
}

// NewMockProxyService creates a new mock instance.
func NewMockProxyService(ctrl *gomock.Controller) *MockProxyService {
	mock := &MockProxyService{ctrl: ctrl}
	mock.recorder = &MockProxyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProxyService) EXPECT() *MockProxyServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockProxyService) Auth(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockProxyServiceMockRecorder) Auth(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockProxyService)(nil).Auth), arg0, arg1, arg2)
}

// Publish mocks base method.
func (m *MockProxyService) Publish(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockProxyServiceMockRecorder) Publish(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockProxyService)(nil).Publish), arg0, arg1, arg2)
}

// VerifyToken mocks base method.
func (m *MockProxyService) VerifyToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockProxyServiceMockRecorder) VerifyToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockProxyService)(nil).VerifyToken), arg0, arg1)
}
