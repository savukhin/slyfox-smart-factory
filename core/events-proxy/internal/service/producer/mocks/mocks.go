// Code generated by MockGen. DO NOT EDIT.
// Source: eventsproxy/internal/service/producer (interfaces: NatsProducer)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mocks.go -package=mock_producer eventsproxy/internal/service/producer NatsProducer
//

// Package mock_producer is a generated GoMock package.
package mock_producer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNatsProducer is a mock of NatsProducer interface.
type MockNatsProducer struct {
	ctrl     *gomock.Controller
	recorder *MockNatsProducerMockRecorder
}

// MockNatsProducerMockRecorder is the mock recorder for MockNatsProducer.
type MockNatsProducerMockRecorder struct {
	mock *MockNatsProducer
}

// NewMockNatsProducer creates a new mock instance.
func NewMockNatsProducer(ctrl *gomock.Controller) *MockNatsProducer {
	mock := &MockNatsProducer{ctrl: ctrl}
	mock.recorder = &MockNatsProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNatsProducer) EXPECT() *MockNatsProducerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNatsProducer) Publish(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNatsProducerMockRecorder) Publish(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNatsProducer)(nil).Publish), arg0, arg1, arg2)
}
